[BLANK_AUDIO] . Good morning, can you hear that? Cool, yeah, I can hear me. All right, hello again, software engineering, you know the drill. So we finished with testing now. So we're on to the last part of, or the last topic of this module, which is project management. So yeah, we've looked at design and testing, now we're gonna see how the actual project management cycle, how everything comes together. So project management, as one can imagine, it's organizing, planning, and scheduling software projects. I realize I jumped into that. Does anyone else, does anyone want the attendance code, or has everyone got it? [BLANK_AUDIO] Nobody seems to complain, I'll just put it on at the end. So yeah, organizing, planning, and scheduling software projects. So the whole software development process from a management standpoint, basically. So this lecture, we're going to introduce software project management, discuss project planning and the planning process. How to graphically represent management processes, and discuss the notion of risks and risk management process. So yeah, these are the things we'll be looking at in this lecture. Management activities, project planning, project schedule, and risk management. [BLANK_AUDIO] So the whole software project management thing is, involves ensuring that your software is delivered on time, on schedule. And also that it encapsulates what you need to implement. So you've been given a specification, you need to make sure it meets that specification, but also plan to do it in a way that is cost efficient, time efficient, and everything like that. So it's a good project, but also it is a good project, which was implemented efficiently. The reason for that is software development is subject to budget and schedule constraints. Like with any business, they want to make sure that what you're making, your product that you're making is profitable. So you need to make sure that you plan the software so that it is, so that the cost of making it is small, and as small as it can be, and that it's delivered on time. So you're not spending five years on a project, which could just take six months if it was planned correctly. [BLANK_AUDIO] So the thing with software engineering is that, the products that we'll be creating if you do become a software engineer, they can't be seen or touched. And that makes it different to normal engineering where you're building bridges and planes and cars and everything. Those can be seen, but because it can't be seen, it's a little bit more loose in that there isn't a recognized, software engineering isn't recognized as an engineering discipline. So it doesn't have all those rules and regulations that you need to make something safe like a bridge or a plane or a car. So the software engineering process is not standardized and it's people tried their best with UML and all these different ways that you can plan a project. UML is probably most successful, but you still find that not a lot of people in like small businesses will take the time to spend loads and loads and loads of time on planning, they might just jump straight into development and go about it like cowboys. Whereas like the bigger companies, they have more standardized practices to implement in software, but it's all different. It is like a wild west. So yeah, it's not standardized. They tried to be standardized and there are things that are used commonly across businesses, but it's not standardized as mechanical and electrical engineering and everything. Because those actually will kill someone if you don't do it right. Whereas software engineering probably will. A lot of projects that you'll do will just be like one off projects as well. So yeah. So management activities, what, what do they entail? So they include proposal writing, so you have a software. You need to propose what it's gonna be. The whole project plan and schedule. You need to cost for your project to make sure how much it will cost. You'll be monitoring your project and reviewing your project. You'll be choosing personnel, so your stuff and their evaluation and report writing and presentations as you're all discussing throughout the whole throughout the whole project, you'll be discussing what everybody has done and then yeah. So, these activities that I just mentioned, they're not only software management and some things you will find are equal, um, to like say normal engineering, uh, like mechanical engineering, electrical engineering. Um, you know, you'll probably need to do all of these in mechanical electrical engineering. It's just the way you do it is not as standardized as the other ones. Um, so yeah, technically complex engineering systems such as huge suspension bridge, um, you'll find will run the same problems in project development as software systems. Um, so project staffing, so who's actually going to be implementing the software. Um, now it might not be possible that you can get the best of the best and, um, your project budget includes how much, um, the staff's wages and everything. Um, that might not allow the use of highly paid stuff, um, staff with appropriate experience for your project may not exist. Um, an organization may wish to develop employee skills on a software project as well. So you might want to train someone up to, you know, be used to your systems so that you can keep them for awhile, but it also means you get to pay them less. Um, so managers work within these constraints, these main constraints, um, especially because there is always, well, right now there's still an international shortage of skilled IT stuff, not an international shortage of IT stuff, but skilled IT stuff. Um, I think, yeah, my, my friend works in, um, what is it? The department of chemistry. He's always going on about how, uh, he is needed in his job because the skills needed for that job, involve chemistry and robotics and software engineering and nobody has that skillset. Well, they do have that skillset, but to hire somebody with that skillset, you'd be expected to be paying a lot of money for. So there's always these constraints with project stuff and in any project, it depends what you're making, how unique it is. And, um, how skilled are they as well? Um, project planning is the most time consuming and this is why people, um, tend to, uh, it's why people tend to just be kind of haphazard with it and just get on with it. Um, so during the project planning, there is continuous activity in this stage from the initial, from the initial concept all the way to the system delivery. You like your plans will always be changing. Um, because you'll find something new that you need to implement and then you go, Oh yeah, we need to implement that, which means we need to reconsider that. And then you drop a whole different plan for that. Um, for this particular thing that you've implemented, um, there are different types of plans, not just like, um, you're like, um, like your system architecture plan. It goes into the whole idea of the whole project management. So you'd have a quality plan. Um, so, these are all the types of project plan. So one of them is a quality plan, uh, that describes all the procedures you're going to use, how are we going to name our variables? Um, how should we do this particular function? How should we communicate with the database, et cetera, et cetera, um, your validation plan. Um, so this will be, this will describe your approach to the resources in your schedule and validation, mainly testing, um, your configuration management plan. So how will the management, how would their configuration affects the whole software, um, project the maintenance plan? Um, it predicts what, you know, you're going to need some maintenance in your system and to make sure it all works. So how will you attribute, um, the costs and what, what like if you get a server, how we maintain it, how much we spend on it, all those things. And then the staff development plan, um, where you look at the staff members you've got and you, uh, note that skills and experience that they've developed throughout the whole project and whether now that they finished this project, you think that they couldn't, you know, you do that. See maybe you can put them on another one or no, they're not actually that good. So maybe we'll just keep them on the low level for now. Okay. So your project plan structure will is, is pretty self explanatory. Um, you have your introduction, you then have how you're going to organize your project. Um, your risk analysis, which we'll come on to in a bit. Um, the hardware and software requirements that you'll need. So you have what, what, what OS are you going to use all that? Um, the work breakdown. So that one's pretty important. We'll talk about that soon. Um, the project schedule, which also talk about and monitoring and reporting mechanisms. So yeah, monitoring the project as it goes through and reporting any problems, et cetera, et cetera. So, um, the activities in the project needs to be measurable and they need to be tangible. So, so that you can judge the process, uh, not like, not like a nonfunctional requirements, but, but like nonfunctional requirements in the way they need to be measure, measure measurable and also possible. So there are two things you can have milestones. So these, um, are parts of your project. We say, right, if we get, you know, the login, the milestone might be the login system and the user information system. Um, you might say, okay, we finished part one if we managed to implement that. And then, uh, I suppose that's all goes under deliverables, but, uh, yeah. Um, so that's how you measure your, um, your activities. So is your project on track use milestones, which define a whole group of activities and then deliverables, what you actually create to give to your customers. Um, the waterfall process is flawed, but it does allow for straightforward progress and definition of the progress rather, um, of milestones. So these might be the milestones and the requirements engineering process. You have a feasibility study and then a feasibility report. Can it be done? Um, your requirements analysis and your requirements definition. Um, then you make a prototype after you've done your requirements and then you do an evaluation of the prototype and you continue talking about it. Um, you do a study on the design after your prototype and then you come up with a whole architectural design and then you get the requirements specification. And then again, so you actually finished defining all the requirements and go into detail about what is needed for each one. So when it comes to project scheduling, you split the project into tasks which can be achieved and you decompose the problem just like with any piece of, you know, any algorithm or software you implement. Um, so you estimate how long is it going to take, what do I need to do it and what people will be like resources, staffing resources usually. Um, also any software that you need to do it. Um, now the best way to make use of project scheduling is to have tasks running concurrently. So have different teams split off and work on different parts of the program at the same time. Um, and that's where you can make optimal use of your workforce. Um, and you want to minimize tasks, dependencies as much as possible. There will always be a dependency you will, you can't always implement, you know, the project without having done something in that project first. Um, but you want to try and minimize it as much as possible to make sure that, you know, people aren't waiting for a certain component of the system to have been finished. Um, yeah. And these are dependent on project managers, intuition and experience. So you hope you'd have someone experience. Um, now there are problems with scheduling. Um, you might find this when you do your group project next semester or, uh, your dissertation next year. Actually, that's a good point. This actually links really well into those two modules that you'll be doing throughout university. So you might find that estimating the difficulty of problems and the cost of developing a solution is hard. Um, especially for if you've never written software like, like a project before, it can be very difficult. Um, Lord knows everyone does it. Um, productivity is not proportional to the number of people working on a task. You could have five, um, you could have five monkeys trying to do a simple eight plus B equals C. And then you could have one software engineer, you know, not just five monkeys that you could have, but you, you get what I mean. You don't always need like a huge team to do basic features and, and even more advanced features. You just need the right people doing the right thing. Um, and you know, if your project is late in development and you think, Oh, we don't have enough people. We need to throw more people at this project. Um, those people will need to learn what you've done, what, what has actually been developed in the project so far that creates communication overheads. So, you know, if you do need people later on in the project, really consider, Oh, um, like how much are they actually going to contribute? Or do you just delay the project and just keep the people that you have so far? Um, so I think, you know, you might not be able to estimate, um, the difficulty of the problem. Uh, you'll know if you're unsure, but you'll have an idea. Um, generally whether you can do it straight out the bat or whether you can't, um, productivity is not proportional to the number of people. So, um, and then, uh, you might have a late project and, um, you try and throw more people basically. Um, the unexpected will always happen in software development. Something will go wrong, uh, and it will take ages to figure out what it is. So always allow some contingency in your planning. So what are you going to do if, um, what are you going to do if you have no idea how to implement this thing? You think, Oh no, it won't be that difficult. And then it turns out to be very, very, very difficult. What are you going to do or what can you think? Yeah. What are you going to do if it does turn out to be very, very, very difficult and it delays the project by about a month? Um, the, these are ways that you can model, um, project scheduling. Um, there's, there's, um, there's an activity chart, um, which can show critical paths and then you also have bar charts or Gantt charts, which show the schedule against the calendar time. And these are things you probably will, I think you are asked to give them in the group project. So first you might write out a table like this and you have all your tasks on the left, how long they'll take in the middle and then their dependencies. So T three can't be completed until T one when we call that milestone one. I think that's what the end means. Um, T five can't be completed until T T two and T four, the wise milestone to the completed and then it's the same for everything. So you could draw this out just as a graph to give you, um, an idea of, um, and I did, sorry, um, an idea of, you know, graphical representation of your task if it was like done by Google maps or something. Um, and the minimal time to finish is the length of the longest path. So that would be probably this one that's in bold and I think it is. Um, but that would be 55 days. So the critical time is the length of the longest path and that's 55 days. So that's how you might, um, you could just do Dykstra's algorithm or some kind of eight star algorithm on this, some path find an algorithm to find out the critical path. There are a lot of algorithms that would let you figure that out. Um, if you want to be algorithmic about it and then you could turn that into a Gantt shot. Um, where the, the, the, the, so, so T four can start from right from the beginning. Um, and then you have 10 days to implement that. I don't think this is accurate, but, um, but then, but then cause of the critical path, you can actually, so this is how long the white shows this, how long it should take. But because of the critical path and you got jobs running concurrently, this is the latest that you could actually, um, implement tasks for if that makes sense. So, um, I'm not going to figure it out now, but, um, yeah, I'm not going to figure it out now, but is it T 10? I'm going to figure this out. I'm not going to figure this out now. So, um, yeah, so this shows, um, the actual length of time it should take to make from the start. And then the rest is your, like your leniency period of when T four or task four actually needs to be finished. And it's the same for all of these. So M five, um, there's another frame one. It's confusing. It doesn't matter. That's, that's the lenient. Okay. Milestone one has no leniency. It needs to be implemented and finish like that because it's part of this is on the critical path. But M five, you would have, um, like a month to finish it. So that's how the gun show works and then you could just have a staff allocation. So Fred can do task four and task eight and then task 11, task 12 and then Jane can do task one, task three as Fred is doing these two. So, uh, yes. Pardon. So here they say for task three to be completed, you need tasks one to finish before you can start tasks three. So I think that's why they added to them. Um, might very well not. It doesn't mean milestone. I just thought just a tribute cause it said, but you can't do tasks three until M one is done. Um, and that's why you have, and because it's on the critical path as well, that's why there's just a white bar rather than any green bar. So there isn't any leniency for finishing it. Uh, the weather, so, uh, risk management, um, uh, you, there will be risks, not like somebody might die risks, but more risks actually to do with, um, the anything that might have an effect on the project, although you could include, um, any sort of like injury risk, I suppose. Um, so any risk in a project affects the schedule or the resources of your project. Um, the weather and the effect, the quality and the performance of the final project as well, or the final product rather. Um, and business, any business risks affect the organization of the software of actually developing the software. Um, there's these things called per charts, which relate to the schedule. I don't know what I put here, but, um, so the early star is the earliest time the Tuscan starts. So that would be this one. So task one can start on the zero day. Um, and then the early end is the earliest time it can end given its dependencies, both of them. So you can see that early zero six and then, so you can start tasks too on the sixth day or you can end it on the 14th day because that's what requires, um, that's what, that's when tasks one can finish. So task one can either finish on the sixth day or it can, um, or it can finish on the 14th day and that is mapped over into test two. Um, which is what I just said with the late star and late end. And then the, the slack is the amount of time, the task can be delayed without delaying the project. So if you had a slack of zero, um, that would mean that this is a critical, um, part of this, uh, this critical task and it must be completed is quite important. So, um, task two has the early star of, uh, is tasks one and, and it's early end is early start plus duration. So six plus 16 equals 22. Um, the late end is tasks, three late star and the early star is the early end take, um, early and take the duration. So is the duration there. So you'd have, um, 30 take 16 is 14. And it also relates to that one there. And then, so the slack for tasks three is eight. I don't know. Oh, okay. Yeah, yeah, yeah. Sorry. So the slack is the, um, the, the start. So you have eight days in between the actual, the earliest start date and the, um, late start date to start implementing this. And if you go over day 30, you're probably delayed in your project. And do you change the deadline as well? Yeah. Um, now if you changed it, so that, um, tasks one doesn't have any slack, um, you must start it and you must end it within six days. Um, this changes everything here. Uh, this affects everything later on down the line. And then, hey, you can see tasks two and all the other tasks have, um, have a slack of zero. There is no difference between the day you can start and between the earliest day you can start and the latest day you can start. And so this is a critical path. Therefore not having this implemented in time will delay your project. So that's the important of the critical path. They identifies the tasks which must be completed, um, must be completed. Otherwise you'll delay the project if you don't actually do those, um, according to your schedule. But the other jobs, they can have some slack, um, depending wherever they come in the critical path. So you can see all the slack these ones have. Um, but like, like here, and you can use per charts as well, to show, to show, um, the critical path and how much slack is required for your project schedule. Uh, so we come onto the risk management process. So, um, this includes risk identification. So, um, bit of it that we have, just go away from there. Um, you have project risks, um, that just to recap, project risks affect schedule or resources, product risks affect the quality of performance of the final project and the business risks affect the organization and the procuring of any software. So the risk management processes, you divide, you identify any risks. You do a risk analysis if you've ever done, um, risk analysis before for like a committee or something is pretty much exactly the same. Um, so you assess the likelihood and the consequences of it happens. Um, then you do risk planning, see drop plans to avoid any of the risks. And then you do risk monitoring so you can monitor the risks throughout the project and see how great an effect they are having on your project. So these are common risk identifications. Um, any technology risks, um, people risks, organizational risk, requirement risk and estimation. So technology risks might be, um, yeah, so, um, technology risks might be the database using the system cannot process as many transactions per second as expected. So technology risks are meant to highlight any limitations in the technology you're using. Um, and yeah, people risks. Um, so one might be is impossible to hire anyone with the skills required. That's a big people risky. You need the people, um, and anything relating to any, any staffing issues, um, or any people issues that are affecting the, um, project development, um, organizational. Um, so if your business decides to restructure in the middle of development, um, you might change who's the project manager, who do you report to now that can have effects on the project. Um, tools, wasn't mentioned on the last one. Um, code generated by case tools is inefficient. So any tools that you're using, um, and whether they're having an effect on your project, um, requirements. So if you make a change to requirements because you realize, um, that we could do this in a different way, that might be in a thing that might will affect your project and estimation. Um, like what we said earlier, you might underestimate how hard something is. So any estimation risks, um, turns out that your staff isn't well trained, well trained in, um, this particular software that you're using. So you might say, okay, we might need to let staff train up on that first and, um, that will affect how quickly we can develop, deliver the project. So then you come onto risk analysis. Uh, so you assess the probability and seriousness. Probability is usually you just say very low, low, moderate, high, very high. Um, it could be catastrophic, serious, tolerable or insignificant. So, um, so it, yeah, to give an idea. So if your organizational financial problems force reductions in the project budget, hopefully the organization has not even given you too much money that they can't afford and you'd expect that. So you would say, well, low is probably not going to happen, but if it did happen, it would be catastrophic. Um, your project would probably get canceled or something. Um, key staff, uh, ill at critical times in the project. It's a moderate risk. Somebody might, I don't know, two weeks before a presentation, somebody get the flu. That means there's a week that they didn't work. It's a serious problem. Um, but it is moderate. Um, this one's always a big one. People usually mention is, um, you've underestimated the time it will take to develop it. There's a moderate chance of that. It's not low, it's not really high, but it's serious. Um, and then if you were doing case tools, um, like any tools that you're using and then they find out, Oh wait, we can't use those. Um, you've already identified that, um, is an efficient so they can't be integrated. You might identify that one that's high, but yeah, it's tolerable. We can work around it. It won't be too bad. Um, yeah. So, um, so yeah, so you've analyzed the risk and you've seen the probability of it happening and also the seriousness of it. What, what will happen if this risk does come to fruition? So what you need to do then is avoidance strategies. So, um, the aim of that is to avoid or to reduce the probability that it will happen, minimization strategies. So, um, so the actual, um, the, the impact on the risk or the impact on the risk on the project is reduced. So any minimization or mitigation and then contingency plan, if the risk does occur, what can you do? Uh, what can you plan to deal with it and work around it? So, um, risk factors. So, uh, for people, you might have poor staff morale, poor relationships amongst team members and job availability, technology. You might have late delivery of hardware or support software, many reported technology problems. So these might be, um, factors that make you think, Oh, we might have a problem. Um, and we need to, you know, consider these risks is by looking at all the factors and go, okay, that's a potential, that's a potential indicator that something might go wrong. So we need to plan around that risk. Yeah. So, um, for project management tools, there are a lot online. Um, because a lot of people just like to make project management tools apparently. Um, and, uh, you don't need any software really for any tools to manage your project. Um, there are too many to list really. Um, one is Zoho apparently I had to look at it. It seems all right. Um, another one I see a lot is Trello. Uh, get hub is one, lots of project. Well, get hub is also repository, but you can do project management stuff. Um, and yeah, so, uh, so the key points of this lecture, you need to have good project management, um, and it's essential for project success, intangible nature of software. The fact that it doesn't really exist causes a lot of problems. Um, so you need to be able to plan, uh, causes a lot of problems for management. Um, so managers have diverse roles, um, but their main things are planning and estimating and scheduling projects and planning and estimating or it's written processes which continue through the course of a project. Um, more key points. Um, project milestone is predictable state that you expect to have in your project. At some point, uh, there are three types of risks, project risks, which affect the scheduling. And the whole, any resources that the project product risks, um, affect the quality of the project and business risks. In fact, the whole, um, money managerial side project planning and, um, risk management is concerned with identifying and coming up with avoidance strategies and mitigation strategies and contingency plans to avoid any risks. Thank you very much. Uh, have a good rest of the day.