[ Background noise ] >> Okay, good morning. Today's session, we're going to be looking at a case study, okay? So we're doing a requirements analysis case study to resolve any sort of issues about how to do requirements analysis, because it's in your coursework. Okay, so if you had a quick look at this, you'll notice it's for a hotel booking system. Have a look at some of the documentation associated with that. And this is also carried on for a second time when the same hotel booking system, we do a case study of the OO design of it. So looking at the object-oriented design. But in today's session, we're going to be looking at requirements analysis of this hotel booking system. Okay, so what's the purpose of it so that we can look at some requirements engineering? So we're going to think of a hotel booking system, and we're going to list what stakeholders there are. Stakeholders are people who are affected by the system itself. Okay. Once you know the different people are affected by the system, then you can usually work out some requirements, because each person has requirements. So it's a really important way to dig the requirements out. So if you think of something like a clinic that might have stakeholders like patients, okay, and it might have stakeholders like doctors and nurses, but it would also have a stakeholder of the Department of Health, you know, that is managing things like general public health, yeah? And you would consider functionality from their point of view as well. So for the requirements themselves, there has to be relevant users of that requirement, a user or users. So we want to list those stakeholders and users, and then list out the requirements, and finally, list out what are considered business rules. And business rules are important because they say how the system behaves actively, yeah? How it changes. Okay, so a business rule might be that, for example, a receptionist at a medical clinic can look at a patient's date of birth and maybe look at their name and their NHS number, but it cannot look at their address, because that's considered private information and you don't want to release it. That would be a business rule, because it's saying who can see what. And if you get the business rules wrong, then your system might not comply with the Data Protection Act, and your system could get shut down or you can be fined as serious impacts. So the business rules are a critical element of the system. It's very important when you look at any hotel booking system or whatever, that you consider the boundary of the system itself. So here I've got my, I'm considering my hotel booking system and I'm considering some processes that can happen and I've broken them up into parts. So there may be the functionality of booking in and out of a room, okay? So that is a process that the hotel needs. So that means, so booking the room in the first place and then checking in and out. They're slightly different. Booking it is making a reservation for the future, checking in is what you do when you arrive at the hotel to say that you're using their services and you've agreed, you've sort of started the contract then, haven't you? You know, you've said, I am now staying in this room. And checking out is a process where they look at your bill and you have to pay all the outstanding bills. And now you're not a resident of the hotel. So checking in makes you a resident of the hotel. It changes your internal state. Checking out means you're not a resident of the hotel. And that's important because the hotel are probably legally obliged to have some duty of care for you when you're a resident of them. There are other issues like whether the room needs to be cleaned after you've checked out, et cetera, okay? The room booking, et cetera. Now, in terms of marketing for this hotel, we could have the hotel website itself, okay, which makes sense. They might have a home page. I don't think everyone has a home page, okay? And you can also imagine lots of other feeds of marketing. So you can have Expedia, you can have hotel.com, booking.com. You've got all these little marketing feeds, haven't you, for your hotel. Okay, these are standard services. Then we've got paying for the room. Okay, so we could pay for the room in cash. We could pay for the room using PayPal, Google Pay, maybe Meta Charge, Sage Play. I mean, you know how many different ways there are paying now. It's a lot of different ways of paying. And then we're doing our meal booking. So when I say consider the boundary, this is our new system, okay? So what I've drawn originally is just lots of functions that you would need for staying in a hotel like booking the room. But I've drawn a red line, and that red line shows you the boundary of our new system. So our new system will handle the booking. It will handle checking in and checking out. It will handle marketing on the hotel's website. And I'm assuming, since this is included in the system, when I click on the hotel website, it will take me, say I wanna book. It'll take me to the booking system, obviously. And then if I wanna pay by cash, evidently I can do that when I check out with this booking system. I pay by cash, it prints a receipt, it says the amount, that's doable. We don't need anybody else to permit us to pay by cash. Cash goes in the cash drawer and it gets registered, doesn't it? And then it gets taken to the bank at the end of the day. So we can imagine our system handling this functionality. What it won't handle is doing the PayPal payments, because PayPal handle that. Okay, so now we can see we've got an external boundary of our system that connects it to PayPal, an external boundary of our system that connects it to Google Play. So where you draw that red line determines all the edges of your system, all the boundaries, and it determines what external actors there are. So now I've got an external actor of PayPal, an external actor of Google Play, maybe an external actor of some meal booking system. That could be another system I have to develop, okay? But I'm not doing the meal booking in this first one. I could take the red line and I could bring in the meal booking. I could wrap that round if I wanted to. That's up to you. That boundary determines the size of your system and it determines the interfaces of your system. So I'm not including Expedia, so I'll need some boundary to them. If I want to include their marketing, you're gonna have a series of business rules. So when we had the problem with the pandemic, business rules changed. Okay, they changed like this. When you went to a hotel, that hotel had to leave the room empty for 24 hours after cleaning before you were allowed to put in a new guest, okay? In fact, there were laws that affected the business rules cuz they have constraints on it, cuz they were trying to reduce cross infection between people staying at residence. In fact, the number of people who were allowed to stay in places was changed. In fact, sometimes the whole place was shut down, so the rules changed all the time. So those business rules can affect the context of the system you're working at. So let's have a look at some examples of business rules. And you can come up with a whole load more, but here we go. Guests can request a booking, but the receptionist, it says, it should say only, it's a little tipper there, only. So about that. Only receptionist can confirm the booking. So the booking isn't confirmed until they get back to you. So you make a request for a booking, it's confirmed. Then they can cancel a booking three days before the stay. If after three days before the stay, a cancellation charge of one day is levied. Notice the computer system has to know all about these rules because it controls whether somebody, it controls whether a charge is levied, whether that's put on somebody's account. It controls about who, when they're logged in, can cancel a booking. So these are things that, even though you say they're business rules, they're rules of the system, aren't they? And they're obviously changeable. Now we've got the cleaning rotor can be organized so rooms are booked for that day, need cleaning, and are cleaned first. Okay, so this is again, so instead of saying, just go in and clean all the rooms, you put them in order of who people are gonna move in that day, and people have moved out, and you put them on the top of the rotor. And then they're done first, and then in the afternoon, so people can come in, and they can come in by 11 o'clock, and their room will be clean. And then rooms that are not gonna be used for that day, they can be cleaned in the afternoon, you can change the schedule. We can actually make the room cleaning efficient. [BLANK_AUDIO] Meal booking requests for special requirements have to be confirmed by the kitchen staff before being confirmed to the guest. Evidently, the kitchen might not do everything that's required, it might not have the capabilities, it should be some sense of control. Now you can start to see some stakeholders. We've got guests. We've got the kitchen staff and stakeholders. We've got the cleaning staff. Doesn't actually mention cleaning staff on there, but evidently they're part of it. The receptionist can see the name of their guests in the postcode, but not the other contact details, only the managers to see them to maximize guest privacy. Any system you have that maximizes privacy will be a more secure system and a more suitable system. So be very wary of privacy. Put privacy very high up of your list when you're doing your design. And then it says, cuz this was done, this idea was we're thinking, well, maybe, hopefully not, but it's possible that you would have another pandemic outbreak sometime in the future. Pandemic regulations, the room will be left unoccupied for 24 hours before being able to be cleaned and occupied again to prevent virus transmission. All this control is relatively easy to do if you put this into the business rules of the computer system. If you have to do this by hand with bits of paper, it's all gonna go wrong. So really getting this within the business rules is important. And you can imagine coming up with more and more business rules. No reason why not, getting some sense. That's what's meant by business rules. There are a whole list of stakeholders and users of the system. So you've got to consider all the human and the non-human one, other systems. And when I talk about stakeholders and users, in use case analysis, I'm talking about actors, okay? So stakeholders, users, actors. Actor is the term that we use when we do OO modeling. Let's go through it. Receptionist has to use the system. They have to confirm bookings. They have to be able to check room availability before they can do a room booking, don't they? They have to be able to check people in, check people out. They have to be able to take payment. They have to manage the whole process day by day. A receptionist is somebody who's working on the hotel day by day. The hotel owner would be a stakeholder. What sort of thing would they wanna know? What would you wanna know if you were owning a hotel? Well, you might wanna know how much money it's been making. You might wanna know how well it's doing. You might wanna know if they have good bookings coming up in the next month. You might wanna see a report on last year's bookings, and see when the poor occupancy is. Let's say we had a really bad March. March was terrible. What we're gonna do this March? Are we gonna have half price for March? Are we gonna have a special pre-Easter deal coming, or whatever? You're gonna have some marketing push? You're gonna think about that. The computer system can help with that, can help the hotel owner sell more rooms. A guest is a stakeholder. They're staying at the hotel. The computer system is something they interact with. And they're a stakeholder because if they arrive and their room's a mess, and if they arrive and their room's really tidy, that makes a difference to them. So they can be a stakeholder even if they never interact with the computer system, because the computer system's control of the cleanliness of the hotel will affect their stay, okay? So it's a whole load of things. Tax, Tax Inspector, they're a stakeholder because they demand to see tax returns at the end of the year. If your computer system, you press one button and it spits out perfect tax return with everything detailed, you've saved yourself a fortune in accountant's fees. It's fantastic. A tax return has to be done in a particular format, has to take a lot of things into consideration. But the computer system itself can help reduce that things. An accountant, again, an accountant could be using the computer system to produce the accounts. There may be other things that have to be added to the accounts later. So what the computer system may be able to do is it may be able to produce a set of draft accounts giving the ins and outs of the hotel, but it might not include all the costs. So there may be costs like, well, we got a builder in to build that extension and that costs so much. Well, that might not be on the hotel booking system, that could be quite separate, so the accountant would have to resolve that and bring it in, whether it was a capital expense or whether it was a running expense. All has to be done correctly. And it's done correctly because a good accountant will reduce the tax load on the hotel and actually make it possible for the hotel to run and not actually just run into the ground. You would often with hotel chains, not usually a singular hotel, but if you have a chain of hotels like Hilton or somebody like that, they will have a marketing team. And the marketing team wanna know about the overall picture of all the hotels that they're running and they wanna know that this hotel at this time of year isn't doing very well, we have to do something to improve the marketing. If you're cleaning rooms in the hotel, you want your job to be efficient as possible and you don't want to be having to rush to clean rooms that nobody's gonna be staying in that day. So the ones you wanna rush to do were the ones that are gonna be used that morning, and that makes sense. And the manager of the hotel. In general, a stakeholder is anybody who gets affected by the operation of the computer system, and all these people could be affected. There are non-human actors. So any interface to a functionality such as PayPal, such as hotel.com, such as Expedia. But the list is very, very extensive with computer systems now. So external actors of this type are very, very broad in modern computer systems. You'll often have a lot of them, and you're probably not even aware, you're just saying, well, we need Apple Pay and we need Google Pay. But they are actors and they need integration with your hotel system. Now some of the integration may be relatively trivial. It may not require you to add in things to the computer system. So for example, payment systems, because the payment's done on a separate card on a separate account. Apart from just saying a payment's been made and somebody typing in the Pay by PayPal, you don't necessarily need to integrate it with the system itself, because it's just done. It actually can be done on a separate console. So it may not require deep technology. Things like the connect to booking.com and hotel.com, you need to integrate with their website. You need to have a call into your website from their website to say you're available, to say what rooms are available, so you need to broadcast your availability back. That has to be in the standard format, like an XML string or whatever. It's usually some type of API that you're expected to integrate with. That will take time and it will take cost. So the payment's not so much, but the other ones, yeah, they're gonna take some time. And then we can have our list start to list our requirements. These requirements can be structured as, well, what we structure in them? Structure them as use cases. Okay, so search for a hotel room with a given criteria. Where's the hotel? How much I'm willing to pay? Does it have a swimming pool? Does it have air conditioning? Very important in my case, is it pet friendly? I always like to take my dog. Okay, so that is a guest thing. It's a guest service. Make a booking request is a guest service. Confirm booking request is the receptionist. Delete the booking. Check the guest in. Check the current room occupancy. Okay, so you don't want a cleaner walking into a room that's currently occupied. You want them to leave the room quietly, don't you? Or if the room is occupied, they may want to make a request to the guest to see if they want their room cleaning. That could be done online. You could have a system where the cleaner could just send you a WhatsApp message and you'd say, room clean today. You'd just go, yes, no. Okay, instead of this thing knocking you at like nine in the morning when you're trying to get some sleep, it's not so nice, is it? If you could get a little text message, that would be a bit sweeter. So you can see how a lot of computer systems, they don't do things like this. They don't have check if you want your room clean doing online, but it's a nice thing to have if you could do it. Mark room is clean. Okay, so they've cleaned the room and then they update the system so the room's ready. That's important because then when people land at reception, the reception go, top five empty rooms that are clean. They just pop somebody in, they just pop them straight in there, don't they? 105, 110, they don't have to ask anybody cuz they know it's been updated on the system. Okay, generate the invoice, okay, receptionist. Allow secure login. Notice lots of people should be able to log in. There's probably more than that on the list. These, often if you see these slides, you'll be going, well, there's something missing. It's only missing because there's only so much you can get on a slide. This is 14 requirements, there will be a lot more. It will be very long, okay. Generate end of year account receipts, useful for an accountant or a tax inspector, important. Control the marketing and a loyalty scheme. Didn't mention that before, that's quite nice. Stay five times, get your next one half price, okay, however you wanna do it. However you structure it, okay? Generate a cleaning rotor, who is cleaning which room in which order? And again, now put show meal bookings. Well, do we have meal bookings or not? We were like 50/50 before, weren't we? Then do your use case analysis. So our use cases start with an ID, remember? It's just an ID listing the UC1, UC2, or something like that. Then the name of it, then the description. What must be true for the thing to go ahead? And then the events that are involved, the stepwise interactions for the thing. Then some possible change of the internal state. And then other use cases that are included with this use case. And possible extensions to it. And what's gonna make it happen? What's gonna trigger it? Let's have a look at that in practice. User registration, okay, so UC1 is user registration. This allows a user to create a new account, okay? Then for this to work, the user has to have a working email service. So if you don't have working email, you can't register with this system. Next one, the user enters their email address, okay? And they need to have a role added. If it was something like a guest, you would have the role, you would have that hard coded into the web page itself. And you'd have some essence of permission. If the email's invalid, they've typed the email incorrectly and go back to step one, okay? Basic validation. If the email's already used, that's no good. Because obviously you need a new email if it's a new account. Or if the password doesn't comply with non-functional requirement, non-NFR, non-functional requirement five. We'll look about what that is in a bit. I can list that one. Then go back to one. For new accounts, guest accounts, no permission required. If other accounts is requested, then user must be logged in as system administrator, okay? So this is a stop go thing. It can throw an exception if you're not. So you can't just create any account if you're just anybody unless you're a guest. Okay, so obviously guests, they can log themselves in as a guest, that's fine. Then at this stage, then the user checks their email inbox and clicks on the receive link. This opens up the browser window that confirms the email possession to the user. The user is then taken to the login window. And the post condition is the new user's account is created. It might be that the new user's account is created if the process succeeds. You might put that detail in. There's no includes and extends. Notice the trigger, the user is pressed and clicked the registration button. That's what starts the process off. They've clicked register, okay? It says new user, register, okay? User login, again, so we've got UC2, we call it user login. This allows, so the description says, this allows the user to log in and it says the system has to be operational. Okay, the user enters their username and enters their password. If their details are incorrect, they're taken back to step one. If the user's then taken to the homepage, depending on their role, okay? So if they're a guest, they're taken to the guest homepage. If they're a cleaner, they're taken to the cleaner homepage. So you've got some navigation here. If they're wrong, the post condition says, if the wrong password five times the account is locked, if the correct username password, then user status logged in equals true. So the trigger of that, the user's clicked the login button as an attempted action that requires authentication and is currently logged out. So there's two ways you can get that. They've actually gone for a functionality that needs login and they're not logged in, or they've clicked on login. Room search. Okay, so this providing, allowing you to search for a given room. So the system has to be in operation. The user enters their search details, dates, location, number of guests, ages, hotel detail, request, swimming pool, etc. The reason why you need ages is that if somebody's under 18, they obviously, if they're under a certain age, they have to travel with an adult. Yeah, and if they're under a certain age, then they can stay in their parents' room at a reduced rate. Okay, so obviously you might need their age. Above it, we're not talking about over 18. We're talking about under a certain age and over a certain age. Not like, are you 50 or whatever. They don't want their exact age. Now if the system finds an exact match, it will result the list in order. Price, depending on the user's preference, distance to location, price or recommendation level. So again, this is somewhat more complex. You have to work out what you're gonna do. And then for each possible match, the user's shown pictures of the room, details of the room and hotel. And then if the system cannot find the exact match, this is the sort of the probably more interesting part of the algorithm. It tries to find rooms which find closest match to the requirements. It needs some sort of scoring, doesn't it? Needs to find some way of scoring them. So it needs a score based on cost, on location, etc. So it needs some sort of sensible way of doing that. And it said this matching scoring is yet to be decided. So this is ongoing of the requirements. Notice this is a search only, so there's no post condition. System doesn't change. And the trigger is the user is navigated to the search room page. This is evidently a web application. So we have gone through the stakeholders. We've gone through some basic requirements and then we've tried to put them into use cases, okay? Next thing you can ask is what possible non-functional requirements? Well, this is a web system. So I need to determine what browsers I support. I've got Chrome and Safari, but maybe now you're gonna add in, I don't know. Nobody wanted to put in IE cuz everybody hates IE and it was horrible. But now they've got Edge. Edge is considerably a nicer Microsoft browser. It's certainly sort of more usable. So maybe you put Edge in there as well, depending. You could have issues to say, is it compatible with mobile browsers? Yeah, and should it be formatted and tested on mobile browsers? So I would add to that list mobile Safari, mobile Chrome, Androids, browser, whatever the default one is, etc., etc., a number of lists of other browsers. And then for each browser, you should really put which version number it is. Because you don't wanna have to test on all version numbers, but you wanna know. And if they log in with an earlier version, you can just say please update your browser, easy enough. Just say update to the latest version. You don't have to make it unfriendly. You can just say, or you could show them a basic version of the screen. Say, well, we're gonna downgrade you now. We can't do very, it's not gonna look very nice, but at least it works. But please update. It's a bit, be a bit more friendly. Systems should respond to the request with a maximum response time of 500 milliseconds. Systems should have enough storage to handle a minimum of 5 million guest transactions. So it's not saying guest, but it's saying transactions. The guests themselves, it's not difficult to put in a database that will support 500 million different guests. That's a tiny bit of storage on a database. But the transactions, they take a lot more storage. So you gotta think about that. I mentioned this in the register and login. There is something called the non-functional requirement five. That's just listing it in detail. Notice I referred to it externally rather than embed it in. The reason for that is that you usually wanna change these without having to change all the other documents, and you might refer to it more times. It's just nicer to structure it in nice separate units. Password must be at least eight characters, uppercase, lowercase, and a numerical digit. Okay, all user names must be ten characters, okay? Maybe not, maybe it should be nine characters, six characters. All user names actually should say must be ten characters and a valid email address cuz I remember before we asked them to put in an email address for us, but again, this is work in progress, isn't it? So what we looked at today was looking at the functionality, all the different bits of the functionality, and think of the boundaries of the system, the edges of the system. So when I did all the functionality at the beginning, remember I put that red line about working out what was inside and outside my new system. That's a really good point, a place to start, is look at all the functionality that your thing sits within, what ecosystem, and put a red line, what you're gonna include and what you're gonna exclude. That's a really important start. That will also determine what external systems you need to support. So when I said about the PayPal, well, maybe that could be done separately. With PayPal, we just go to the site, but the integrating with booking.com or hotel.com, we might need to introduce some API integration, it's more work. It will tell you what work you need to do and what use cases. Good idea to list the users and stakeholders, cuz remember, without listing out the cleaners, we wouldn't think about this protocol and making sure the room's clean, etc. And then try and gate down the functionality into the use cases, okay? And it's useful, cuz then you can look at the external interfaces, the functionality system. And then remember to include the non-functional programs. And in this case, one of the critical non-functional requirements was to support the correct browser, okay? Cuz it's a web system, and those are people forget to put that in. And then they send it out, and people go, well, your system's just rubbish cuz it just doesn't work on my phone. Then they go and book for another hotel. They go and use somebody else if you're not gonna support them. Cuz you very quickly lose the customer, it doesn't take you long, does it? [ Background Sounds ]